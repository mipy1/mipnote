#!/bin/bash

######################################
##  mipnote  -- a project by mipy1  ##
######################################

## Initialisation stuff
# Arguments given
arg=$1

# Colors!!
red='\033[1;31m'
purple='\033[1;35m'
green='\033[1;32m'
bold='\033[1m'
nc='\033[0m'

# Opens config file
. "${XDG_CONFIG_HOME}"/mipnote.conf


## Help function lists all arguments and shows syntax
function help_fn () {
		echo ''
		echo -e "  ${red}Mipnote${nc} ${purple}- A highly configurable CLI note-taking app, based around git${nc}"
		echo '  ------'
		echo -e "  ${green}Syntax:${nc}"
		echo '  mipnote {argument}'
		echo ''
		echo "  If no argument is present, you will be prompted with the name of a note to create/edit"
		echo ''
		echo '  Arguments are as follows:'
		echo '  -h or --help    :  returns this output'
		echo '  -i or --init    :  initialises a new notes repository'
		echo '  -p or --preview :  previews a note with the previewer set in mipnote.conf'
		echo '  -e or --edit    :  edits an existing note'
		echo ''
		echo '  To change settings, edit mipnote.conf'
		echo ''
}


## Initialisation function for creating new notes repository
function init_fn () {
		if [[ -d "${notes_dir}" ]] ; then
				read -p '  Notes directory already exists, continuing will erase it and all the notes inside [y/n]? ' response
				if [ "${response,,}" == "y" ] || [ "${response,,}" == "yes" ] ; then
						rm -r "${notes_dir}"
						mkdir "${notes_dir}"
						cd "${notes_dir}"
						git init

						unset response
				fi
		else
				mkdir "${notes_dir}"
				cd "${notes_dir}"
				git init
		fi
}


## Main function for creating a new note
function run_fn () {
		if ! command -v "${editor}" &> /dev/null ; then
				echo "${editor} is not installed, either change it in mipnote.conf, or install it"
		else
				cd "${notes_dir}"
				read -p $'\033[1mName Of Note:\033[0m ' note_name
				if [ -f "${note_name}" ] ; then
						echo -e "${bold}A note with that name already exists${nc}"
				else
						"${editor}" "${note_name}${file_ext}" &&
						git add "${note_name}${file_ext}"
						git commit -m "My note \"${note_name}\", on: $(date)"
		
				fi
		fi

		unset note_name
}


## Edit function for... well editing notes!
function edit_fn () {
		if ! command -v "${editor}" &> /dev/null ; then
				echo "${editor} is not installed, either change it in mipnote.conf, or install it"
		fi
		if ! command -v "${searcher}" &> /dev/null ; then
				echo "${searcher} is not installed, either change it in mipnote.conf, or install it"
		else
				cd "${notes_dir}"
				echo -e "${bold}Name Of Note:${nc}"
				note_name=$(fzf)
				"${editor}" "${note_name}" &&
				git add "${note_name}"
				git commit -m "My note \"${note_name}\", on: $(date)"
		fi

		unset note_name
}


function preview_fn () {
		if ! command -v "${preview_ed}" &> /dev/null ; then
				echo "${preview_ed} is not installed, either change it in mipnote.conf, or install it"
		fi
		if ! command -v "${searcher}" &> /dev/null ; then
				echo "${searcher} is not installed, either change it in mipnote.conf, or install it"
		else
				cd "${notes_dir}"
				echo -e "${bold}Enter Note Name To Open:${nc} "
				"${preview_ed}" "$(${searcher})"
		fi
}


## Calls necessary function
if [ -z "${arg}" ] ; then
		run_fn
elif [ "${arg}" == '--help' ] || [ "${arg}" == '-h' ] ; then
		help_fn
elif [ "${arg}" == '--init' ] || [ "${arg}" == '-i' ]; then
		init_fn
elif [ "${arg}" == '--preview' ] || [ "${arg}" == '-p' ] ; then
		preview_fn
elif [ "${arg}" == '--edit' ] || [ "${arg}" == '-e' ] ; then
		edit_fn
else
		echo ""
		echo "Please enter a valid argument, or use -h or --h for help"
		echo ""
fi
