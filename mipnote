#!/bin/bash

######################################
##  mipnote  -- a project by mipy1  ##
######################################

## Initialisation stuff
# Arguments given
arg=$1

# Colors!!
red='\033[1;31m'
purple='\033[1;35m'
green='\033[1;32m'
bold='\033[1m'
nc='\033[0m'

# Opens config file
. mipnote.conf


## Help function lists all arguments and shows syntax
function help_fn () {
		echo ''
		echo -e "  ${red}Mipnote${nc} ${purple}- A simplistic CLI note-taking app, based around git${nc}"
		echo '  ------'
		echo -e "  ${green}Syntax:${nc}"
		echo '  mipnote {argument}'
		echo ''
		echo "  If no argument is present, a new note will be created"
		echo ''
		echo '  Arguments are as follows:'
		echo '  -h or --help  :  returns this output'
		echo '  -i or --init  :  initialises a new notes repository'
		echo ''
}


## Initialisation function for creating new notes repository
function init_fn () {
		if [[ -d "notes" ]] ; then
				read -p '  Notes directory already exists, continuing will erase it and all the notes inside [y/n]? ' response
				if [ "${response,,}" == "y" ] || [ "${response,,}" == "yes" ] ; then
						rm -r notes
						mkdir notes
						cd notes
						git init
				fi
		else
				mkdir notes
				cd notes
				git init
		fi
}


## Main function for creating a new note
function run_fn () {
		cd notes
		read -p $'\033[1mName Of Note:\033[0m ' note_name
		if [ -f "${note_name}" ] ; then
				echo -e "${bold}A note with that name already exists${nc}"
		else 
				"${editor}" "${note_name}.md"
		fi		
}


## Calls necessary function
if [ -z "${arg}" ] ; then
		run_fn
elif [ "${arg}" == '--help' ] || [ "${arg}" == '-h' ] ; then
		help_fn
elif [ "${arg}" == '--init' ] || [ "${arg}" == '-i' ]; then
		init_fn
else
		echo ""
		echo "Please enter a valid argument, or use -h or --h for help"
		echo ""
fi
